---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "${CLUSTER_NAME}"
  labels:
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ["192.168.0.0/16"]
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
    kind: IonosCloudCluster
    name: "${CLUSTER_NAME}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: v1
kind: Secret
metadata:
  name: "${CLUSTER_NAME}-credentials"
type: Opaque
stringData:
  token: "${IONOS_TOKEN}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: IonosCloudCluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  controlPlaneEndpoint:
    host: ${CONTROL_PLANE_ENDPOINT_HOST:-${CONTROL_PLANE_ENDPOINT_IP}}
    port: ${CONTROL_PLANE_ENDPOINT_PORT:-6443}
  location: ${CONTROL_PLANE_ENDPOINT_LOCATION}
  credentialsRef:
    name: "${CLUSTER_NAME}-credentials"
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  machineTemplate:
    infrastructureRef:
      kind: IonosCloudMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    format: ignition
    ignition:
      containerLinuxConfig:
        additionalConfig: |-
          storage:
            files:
            - path: /opt/set-hostname
              filesystem: root
              mode: 0744
              contents:
                inline: |
                  #!/bin/sh
                  set -x
                  echo "$${COREOS_CUSTOM_HOSTNAME}" > /etc/hostname
                  hostname "$${COREOS_CUSTOM_HOSTNAME}"
                  echo "::1         ipv6-localhost ipv6-loopback" > /etc/hosts
                  echo "127.0.0.1   localhost" >> /etc/hosts
                  echo "127.0.0.1   $${COREOS_CUSTOM_HOSTNAME}" >> /etc/hosts
          systemd:
            units:
            - name: coreos-metadata.service
              contents: |
                [Unit]
                Description=IONOS Cloud metadata agent
                After=nss-lookup.target
                After=network-online.target
                Wants=network-online.target
                [Service]
                Type=oneshot
                Restart=on-failure
                RemainAfterExit=yes
                EnvironmentFile=/etc/ionoscloud-env
                ExecStart=/usr/bin/mkdir --parent /run/metadata
                ExecStart=/bin/bash -c 'env > /run/metadata/flatcar'
                [Install]
                WantedBy=multi-user.target
            - name: set-hostname.service
              enabled: true
              contents: |
                [Unit]
                Description=Set the hostname for this machine
                Requires=coreos-metadata.service
                After=coreos-metadata.service
                [Service]
                Type=oneshot
                EnvironmentFile=/run/metadata/flatcar
                ExecStart=/opt/set-hostname
                [Install]
                WantedBy=multi-user.target
            - name: kubeadm.service
              enabled: true
              dropins:
              - name: 10-flatcar.conf
                contents: |
                  [Unit]
                  # kubeadm must run after coreos-metadata populated /run/metadata directory.
                  Requires=coreos-metadata.service
                  After=coreos-metadata.service
                  # kubeadm must run after containerd - see https://github.com/kubernetes-sigs/image-builder/issues/939.
                  After=containerd.service
                  [Service]
                  # Make metadata environment variables available for pre-kubeadm commands.
                  EnvironmentFile=/run/metadata/flatcar
                  # Log to file
                  StandardOutput=append:/var/log/kubeadm-service.log
                  StandardError=inherit
    files:
      - path: /etc/kubernetes/manifests/kube-vip.yaml
        owner: root:root
        permissions: "0644"
        content: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-vip
            namespace: kube-system
          spec:
            containers:
            - args:
              - manager
              env:
              - name: cp_enable
                value: "true"
              - name: vip_interface
                value: ${VIP_NETWORK_INTERFACE=""}
              - name: address
                value: ${CONTROL_PLANE_ENDPOINT_IP}
              - name: port
                value: "${CONTROL_PLANE_ENDPOINT_PORT:-6443}"
              - name: vip_arp
                value: "true"
              - name: vip_leaderelection
                value: "true"
              - name: vip_leaseduration
                value: "15"
              - name: vip_renewdeadline
                value: "10"
              - name: vip_retryperiod
                value: "2"
              image: ghcr.io/kube-vip/kube-vip:v0.7.1
              imagePullPolicy: IfNotPresent
              name: kube-vip
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - NET_RAW
              volumeMounts:
              - mountPath: /etc/kubernetes/admin.conf
                name: kubeconfig
            hostAliases:
            - hostnames:
              - kubernetes
              - localhost
              ip: 127.0.0.1
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/admin.conf
                type: FileOrCreate
              name: kubeconfig
          status: {}
      - path: /etc/kube-vip-prepare.sh
        owner: root:root
        permissions: "0700"
        content: |
          #!/bin/bash

          # Copyright 2020 The Kubernetes Authors.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #     http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.

          set -e

          # Configure the workaround required for kubeadm init with kube-vip:
          # xref: https://github.com/kube-vip/kube-vip/issues/684

          # Nothing to do for kubernetes < v1.29
          KUBEADM_MINOR="$(kubeadm version -o short | cut -d '.' -f 2)"
          if [[ "$KUBEADM_MINOR" -lt "29" ]]; then
            exit 0
          fi

          IS_KUBEADM_INIT="false"

          # cloud-init kubeadm init
          if [[ -f /run/kubeadm/kubeadm.yaml ]]; then
            IS_KUBEADM_INIT="true"
          fi

          # ignition kubeadm init
          if [[ -f /etc/kubeadm.sh ]] && grep -q -e "kubeadm init" /etc/kubeadm.sh; then
            IS_KUBEADM_INIT="true"
          fi

          if [[ "$IS_KUBEADM_INIT" == "true" ]]; then
            sed -i 's#path: /etc/kubernetes/admin.conf#path: /etc/kubernetes/super-admin.conf#' \
              /etc/kubernetes/manifests/kube-vip.yaml
          fi

      - path: /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
        owner: root:root
        permissions: "0644"
        content: |
          # Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com
          # hardening guide.
          KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256
          Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
          MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com
          HostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256
          CASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256
          GSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-
          HostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256
          PubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256
      # CSI Metadata config
      - path: /etc/ie-csi/cfg.json
        owner: root:root
        permissions: "0644"
        content: |
          {
            "datacenter-id": "${IONOSCLOUD_DATACENTER_ID}"
          }
    preKubeadmCommands:
      - rm /etc/ionoscloud-env
      - envsubst < /etc/kubeadm.yml > /etc/kubeadm.yml.tmp
      - cp /etc/kubeadm.yml.tmp /etc/kubeadm.yml
      - /etc/kube-vip-prepare.sh
    postKubeadmCommands:
    - export system_uuid=$(kubectl --kubeconfig /etc/kubernetes/kubelet.conf get
      node $(hostname) -ojsonpath='{..systemUUID }')
    - |
      kubectl --kubeconfig /etc/kubernetes/kubelet.conf patch node $(hostname) --type strategic -p '{"spec": {"providerID": "ionos://'${system_uuid}'"}}'
    users:
      - name: core
        sshAuthorizedKeys: [${IONOSCLOUD_MACHINE_SSH_KEYS}]
        sudo: ALL=(ALL) NOPASSWD:ALL
    initConfiguration:
      localAPIEndpoint:
        bindPort: ${CONTROL_PLANE_ENDPOINT_PORT:-6443}
      nodeRegistration:
        kubeletExtraArgs:
          # use cloud-provider: external when using a CCM
          cloud-provider: ""
    joinConfiguration:
      nodeRegistration:
        criSocket: unix:///run/containerd/containerd.sock
        kubeletExtraArgs:
          # use cloud-provider: external when using a CCM
          cloud-provider: ""
  version: "${KUBERNETES_VERSION}"
---
kind: IonosCloudMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      datacenterID: ${IONOSCLOUD_DATACENTER_ID}
      numCores: ${IONOSCLOUD_MACHINE_NUM_CORES:-4}
      memoryMB: ${IONOSCLOUD_MACHINE_MEMORY_MB:-8192}
      disk:
        diskType: "SSD Premium"
        image:
          id: ${IONOSCLOUD_MACHINE_IMAGE_ID}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-workers"
  labels:
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
        node-role.kubernetes.io/node: ""
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-worker"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${CLUSTER_NAME}-worker"
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
        kind: IonosCloudMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: IonosCloudMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-worker"
spec:
  template:
    spec:
      datacenterID: ${IONOSCLOUD_DATACENTER_ID}
      numCores: ${IONOSCLOUD_MACHINE_NUM_CORES:-2}
      memoryMB: ${IONOSCLOUD_MACHINE_MEMORY_MB:-4096}
      disk:
        diskType: "SSD Premium"
        image:
          id: ${IONOSCLOUD_MACHINE_IMAGE_ID}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-worker"
spec:
  template:
    spec:
      format: ignition
      ignition:
        containerLinuxConfig:
          additionalConfig: |-
            storage:
              files:
              - path: /opt/set-hostname
                filesystem: root
                mode: 0744
                contents:
                  inline: |
                    #!/bin/sh
                    set -x
                    echo "$${COREOS_CUSTOM_HOSTNAME}" > /etc/hostname
                    hostname "$${COREOS_CUSTOM_HOSTNAME}"
                    echo "::1         ipv6-localhost ipv6-loopback" > /etc/hosts
                    echo "127.0.0.1   localhost" >> /etc/hosts
                    echo "127.0.0.1   $${COREOS_CUSTOM_HOSTNAME}" >> /etc/hosts
            systemd:
              units:
              - name: coreos-metadata.service
                contents: |
                  [Unit]
                  Description=IONOS Cloud metadata agent
                  After=nss-lookup.target
                  After=network-online.target
                  Wants=network-online.target
                  [Service]
                  Type=oneshot
                  Restart=on-failure
                  RemainAfterExit=yes
                  EnvironmentFile=/etc/ionoscloud-env
                  ExecStart=/usr/bin/mkdir --parent /run/metadata
                  ExecStart=/bin/bash -c 'env > /run/metadata/flatcar'
                  [Install]
                  WantedBy=multi-user.target
              - name: set-hostname.service
                enabled: true
                contents: |
                  [Unit]
                  Description=Set the hostname for this machine
                  Requires=coreos-metadata.service
                  After=coreos-metadata.service
                  [Service]
                  Type=oneshot
                  EnvironmentFile=/run/metadata/flatcar
                  ExecStart=/opt/set-hostname
                  [Install]
                  WantedBy=multi-user.target
              - name: kubeadm.service
                enabled: true
                dropins:
                - name: 10-flatcar.conf
                  contents: |
                    [Unit]
                    # kubeadm must run after coreos-metadata populated /run/metadata directory.
                    Requires=coreos-metadata.service
                    After=coreos-metadata.service
                    # kubeadm must run after containerd - see https://github.com/kubernetes-sigs/image-builder/issues/939.
                    After=containerd.service
                    [Service]
                    # Make metadata environment variables available for pre-kubeadm commands.
                    EnvironmentFile=/run/metadata/flatcar
                    # Log to file
                    StandardOutput=append:/var/log/kubeadm-service.log
                    StandardError=inherit
      preKubeadmCommands:
        - rm /etc/ionoscloud-env
        - envsubst < /etc/kubeadm.yml > /etc/kubeadm.yml.tmp
        - cp /etc/kubeadm.yml.tmp /etc/kubeadm.yml
      postKubeadmCommands:
      - export system_uuid=$(kubectl --kubeconfig /etc/kubernetes/kubelet.conf get
        node $(hostname) -ojsonpath='{..systemUUID }')
      - |
        kubectl --kubeconfig /etc/kubernetes/kubelet.conf patch node $(hostname) --type strategic -p '{"spec": {"providerID": "ionos://'${system_uuid}'"}}'
      users:
        - name: core
          sshAuthorizedKeys: [${IONOSCLOUD_MACHINE_SSH_KEYS}]
          sudo: ALL=(ALL) NOPASSWD:ALL
      joinConfiguration:
        nodeRegistration:
          criSocket: unix:///run/containerd/containerd.sock
          kubeletExtraArgs:
            # use cloud-provider: external when using a CCM
            cloud-provider: ""
